name: Automatically keep up to date with upstream

on:
  schedule:
    - cron: '0 4,10,16 * * *'

jobs:
  update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3.5.3
        with:
          repository: Zhangfanyu1222/XQuickEnergy
      - name: Backup and Remove documents
        run: |
          cp -r .github/workflows .github/workflows_backup
          cp .gitignore .gitignore_backup
          cp README.md README.md_backup
      - name: Check for updates
        run: |
          git remote add upstream https://github.com/constanline/XQuickEnergy.git
          git diff --exit-code upstream-master HEAD && echo "UPDATES_FOUND=false" >> $GITHUB_ENV || echo "UPDATES_FOUND=true" >> $GITHUB_ENV
      - name: Fetch changes from upstream branch
        if: env.UPDATES_FOUND == 'true'
        run: |
          git fetch upstream master:upstream-master
          git reset --hard upstream-master
      - name: Get all information on the latest commit day of upstream repository
        if: env.UPDATES_FOUND == 'true'
        run: |
          LATEST_COMMIT_DATE=$(git log -1 --pretty=format:"%cd" --date=short upstream-master)
          echo "Latest commit date: $LATEST_COMMIT_DATE"
          echo "Authors, titles, and messages of all commits on the latest commit day:"
          AUTHORS=$(git log --since="$LATEST_COMMIT_DATE 00:00:00" --until="$LATEST_COMMIT_DATE 23:59:59" --pretty=format:"%an" upstream-master)
          TITLES=$(git log --since="$LATEST_COMMIT_DATE 00:00:00" --until="$LATEST_COMMIT_DATE 23:59:59" --pretty=format:"%s" upstream-master)
          MESSAGES=$(git log --since="$LATEST_COMMIT_DATE 00:00:00" --until="$LATEST_COMMIT_DATE 23:59:59" --pretty=format:"%b" upstream-master)
          echo "AUTHORS=$AUTHORS" >> $GITHUB_ENV
          echo "TITLES=$TITLES" >> $GITHUB_ENV
          echo "MESSAGES=$MESSAGES" >> $GITHUB_ENV
      - name: Create Pull Request
        if: env.UPDATES_FOUND == 'true'
        uses: peter-evans/create-pull-request@v5.0.2
        id: cpr
        with:
          token: ${{ secrets.LONGLONG }}
          committer: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>
          branch: upstream-changes
          delete-branch: true
          title: "Merge branch 'constanline:master' into master"
          body: "Author: ${{ env.AUTHORS }}\nMESSAGE: ${{ env.TITLES }} | ${{ env.MESSAGES }}"
      - name: Enable Pull Request Automerge
        if: steps.cpr.outputs.pull-request-operation == 'created'
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.LONGLONG }}
          pull-request-number: ${{ steps.cpr.outputs.pull-request-number }}
          merge-method: rebase
      - name: Auto approve
        if: steps.cpr.outputs.pull-request-operation == 'created'
        run: gh pr review --approve "${{ steps.cpr.outputs.pull-request-number }}"
        env:
          GH_TOKEN: ${{ secrets.LONGLONG }}
      - name: Restore documents
        run: |
          rm -rf .github/workflows
          rm .gitignore
          rm README.md
          mv .github/workflows_backup .github/workflows
          mv .gitignore_backup .gitignore
          mv README.md_backup README.md
      - name: Checkout Code
        uses: actions/checkout@v3.5.3
        with:
          fetch-depth: 0
      - name: Get versionName from build.gradle
        id: version
        run: |
          VERSION_NAME=$(grep -oP 'versionName "\K(.*?)(?=")' app/build.gradle)
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
      - name: Check if tag exists and Set tag name
        id: tag
        run: |
          TAG_EXISTS=$(git ls-remote --tags origin refs/tags/$VERSION_NAME)
          if [ -z "$TAG_EXISTS" ]; then
            echo "TAG_NAME=$VERSION_NAME" >> $GITHUB_ENV
          else
            TIMESTAMP=$(TZ="Asia/Shanghai" date +'%Y-%m-%d_%H-%M-%S')
            echo "TAG_NAME=$TIMESTAMP" >> $GITHUB_ENV
          fi
      - name: Create Tag and Release
        if: env.UPDATES_FOUND == 'true'
        uses: softprops/action-gh-release@v0.1.15
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.LONGLONG }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: ${{ env.TAG_NAME }}
          draft: false
          prerelease: false
      - name: Setup Java JDK
        uses: actions/setup-java@v3.12.0
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle
      - name: Cache Gradle Dependencies
        uses: actions/cache@v3.3.1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
      - name: Grant execute permission for Gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        if: steps.release.outcome == 'success'
        id: build
        run: ./gradlew assembleRelease --build-cache --parallel --no-daemon --warning-mode all
      - name: Sign app APK
        if: steps.build.outcome == 'success'
        uses: ilharp/sign-android-release@v1.0.4
        id: sign
        with:
          releaseDir: app/build/outputs/apk/release/
          signingKey: ${{ secrets.ANDROID_SIGNING_KEY }}
          keyAlias: ${{ secrets.ANDROID_KEY_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}
          buildToolsVersion: 33.0.0
      - name: Upload Apk to Release Action
        if: steps.sign.outcome == 'success'
        uses: svenstaro/upload-release-action@2.7.0
        with:
          repo_token: ${{ secrets.LONGLONG }}
          file: ${{ steps.sign_app.outputs.signedFile }}
          asset_name: xqe-sesame_longlong-signed-${{ env.TAG_NAME }}.apk
          tag: ${{ env.TAG_NAME }}
